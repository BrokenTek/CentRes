DROP DATABASE IF EXISTS Centres;
CREATE DATABASE Centres;
USE Centres;

DROP USER IF EXISTS 'scott'@'localhost';
CREATE USER 'scott'@'localhost' IDENTIFIED BY 'tiger';
GRANT ALL PRIVILEGES ON * . * TO 'scott'@'localhost';

CREATE TABLE EmployeeRoles (
	id TINYINT UNSIGNED PRIMARY KEY,
	title VARCHAR(25)
);

INSERT INTO EmployeeRoles VALUES
	(8,'Manager'),
	(4,'Host'),
	(2, 'Server'),
	(1, 'Back-of-House Anon');
	
CREATE TABLE Employees(
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	userName VARCHAR(25) NOT NULL UNIQUE,
	roleLevel INT UNSIGNED NOT NULL,
	passwordBCrypt CHAR(60) NOT NULL,
	lastName VARCHAR(50) NOT NULL,
	firstName VARCHAR(50) NOT NULL,
	accessToken VARCHAR(60),
	accessTokenExpiration DATETIME
);

CREATE TABLE EmployeeLog (
	employeeID INT UNSIGNED NOT NULL,
	employeeRole TINYINT UNSIGNED NOT NULL,
	startTime DATETIME NOT NULL DEFAULT NOW(),
	endTime DATETIME,
	FOREIGN KEY (employeeID) REFERENCES Employees(id)
);

CREATE TABLE ActiveEmployees (
	employeeID INT UNSIGNED NOT NULL,
	employeeRole TINYINT UNSIGNED
);

CREATE TABLE QuickCodes (
	id VARCHAR(10) PRIMARY KEY
);

CREATE TABLE MenuCategories (
	quickCode VARCHAR(10) PRIMARY KEY,
	title VARCHAR(75) NOT NULL,
	description VARCHAR(1000),
	route char(1),
	visible BOOLEAN NOT NULL DEFAULT TRUE,
	defaultPrice DECIMAL(6, 2) UNSIGNED,
	FOREIGN KEY (quickCode) REFERENCES QuickCodes(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE MenuItems (
	quickCode VARCHAR(10) PRIMARY KEY,
	title VARCHAR(75) NOT NULL,
	description varchar(1000),
	price DECIMAL(6, 2) UNSIGNED,
	route char(1),
	quantity SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	requests SMALLINT UNSIGNED,
	prepTimeInSecs SMALLINT UNSIGNED,
	visible BOOLEAN NOT NULL DEFAULT TRUE,
	FOREIGN KEY (quickCode) REFERENCES QuickCodes(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE MenuModificationCategories (
	quickCode VARCHAR(10) PRIMARY KEY,
	title VARCHAR(75) NOT NULL,
	description VARCHAR(1000),
	defaultPrice DECIMAL(6, 2) UNSIGNED,
	selfDescriptive BOOLEAN NOT NULL DEFAULT FALSE,
	categoryType ENUM('MandatoryOne','MandatoryAny','OptionalOne','OptionalAny'),
	visible BOOLEAN NOT NULL DEFAULT TRUE,
	FOREIGN KEY (quickCode) REFERENCES QuickCodes(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE MenuModificationItems (
	quickCode VARCHAR(10) PRIMARY KEY,
	title VARCHAR(75) NOT NULL,
	description varchar(1000),
	priceOrModificationValue DECIMAL(6, 2),
	visible BOOLEAN NOT NULL DEFAULT TRUE,
	FOREIGN KEY (quickCode) REFERENCES QuickCodes(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE MenuAssociations (
	parentQuickCode VARCHAR(10),
	childQuickCode VARCHAR(10),
	UNIQUE(parentQuickCode, childQuickCode),
	FOREIGN KEY (parentQuickCode) REFERENCES QuickCodes(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	FOREIGN KEY (childQuickCode) REFERENCES QuickCodes(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE TableShapes (
	shapeName VARCHAR(50) PRIMARY KEY,
	svgPathData VARCHAR(5000)
);

CREATE TABLE TableStatuses (
	id VARCHAR(30) PRIMARY KEY
);

INSERT INTO TableStatuses VALUES
	('Unavailable'),
	('Unassigned'),
	('Open'),
	('Seated'),
	('Bussing');


CREATE TABLE Tables (
	id VARCHAR(3) PRIMARY KEY,
	shape VARCHAR(50),
	gridLocationX TINYINT UNSIGNED,
	gridLocationY TINYINT UNSIGNED,
	gridSpanX TINYINT UNSIGNED,
	gridSpanY TINYINT UNSIGNED,
	transformData VARCHAR(5000),
	status VARCHAR(30),
	FOREIGN KEY (shape) REFERENCES TableShapes(shapeName),
	FOREIGN KEY (status) REFERENCES TableStatuses(id)
);

CREATE TABLE TableAssignments (
	employeeID INT UNSIGNED NOT NULL,
	tableID VARCHAR(3) NOT NULL
);

CREATE TABLE TableLog (
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	tableID VARCHAR(3) NOT NULL,
	action ENUM('Add', 'Remove', 'Bused', 'Disable', 'Enable') NOT NULL,
	timeStamp TIMESTAMP DEFAULT NOW(),
	authorizationID INT UNSIGNED,
	employeeID INT UNSIGNED,
	ticketID INT UNSIGNED,
	FOREIGN KEY(tableID) REFERENCES Tables(id),
	FOREIGN KEY(authorizationID) REFERENCES Employees(id),
	FOREIGN KEY (employeeID) REFERENCES Employees(id)
);

CREATE TABLE TicketAndSplit (
	id INT UNSIGNED NOT NULL UNIQUE,
	ticketID INT UNSIGNED GENERATED ALWAYS AS (id DIV 10),
	splitID INT UNSIGNED GENERATED ALWAYS AS (MOD(id, 10)),
	tableID VARCHAR(3),
	total DECIMAL(6, 2) UNSIGNED,
	nickname VARCHAR(25) UNIQUE,
	partySize TINYINT UNSIGNED NOT NULL,
	overrideValue DECIMAL(6, 2) UNSIGNED,
	overrideNote VARCHAR(500),
	overrideAuthorization INT UNSIGNED,
	overrideTimeStamp DATETIME,
	adjustedTotal DECIMAL(6, 2),
	tax DECIMAL(6, 2) UNSIGNED,
	tip DECIMAL(6, 2) UNSIGNED,
	totalPaidAmount DECIMAL(6, 2) UNSIGNED,
	changeDue DECIMAL(6, 2) UNSIGNED,
	timeRequested DATETIME NOT NULL DEFAULT NOW(),
	timeSeated DATETIME,
	timeClosed DATETIME,
	FOREIGN KEY (overrideAuthorization) References Employees(id)
);

CREATE TABLE TicketItems (
	id INT UNSIGNED PRIMARY KEY,
	ticketID INT UNSIGNED GENERATED ALWAYS AS (id DIV 10000),
	splitID INT UNSIGNED GENERATED ALWAYS AS (MOD((id DIV 1000),10)),
	itemID INT UNSIGNED GENERATED ALWAYS AS (MOD(id, 1000)),
	menuItemQuickCode VARCHAR(10),
	changePointer INT UNSIGNED,
	employeeID INT UNSIGNED,
	menuItemID INT UNSIGNED,
	modificationNotes VARCHAR(500),
	seat TINYINT UNSIGNED,
	flag ENUM('Out-of-Date','Updated','Removed'),
	overridePrice DECIMAL(6, 2),
	overrideNote VARCHAR(500),
	overrideAuthorization INT UNSIGNED,
	overrideTimeStamp DATETIME,
	prepPriority TINYINT UNSIGNED NOT NULL DEFAULT 1,
	submitTime DATETIME,
	readyTime DATETIME,
	deliveredTime DATETIME,
	FOREIGN KEY (changePointer) REFERENCES TicketItems(id),
	FOREIGN KEY (employeeID) REFERENCES Employees(id),
	FOREIGN KEY (overrideAuthorization) REFERENCES Employees(id),
	FOREIGN KEY (menuItemQuickCode) REFERENCES QuickCodes(id) 
);

CREATE TABLE BufferedTicketItems (
	id INT UNSIGNED PRIMARY KEY,
	ticketID INT UNSIGNED GENERATED ALWAYS AS (id DIV 10000),
	splitID INT UNSIGNED GENERATED ALWAYS AS (MOD((id DIV 1000),10)),
	itemID INT UNSIGNED GENERATED ALWAYS AS (MOD(id, 1000)),
	isNew BOOLEAN NOT NULL,
	employeeID INT UNSIGNED,
	menuItemQuickCode VARCHAR(10),
	modificationNotes VARCHAR(500),
	seat TINYINT UNSIGNED,
	overridePrice DECIMAL(6, 2),
	overrideNote VARCHAR(500),
	overrideAuthorization INT UNSIGNED,
	prepPriority TINYINT UNSIGNED NOT NULL DEFAULT 1,
	FOREIGN KEY (employeeID) REFERENCES Employees(id),
	FOREIGN KEY (overrideAuthorization) REFERENCES Employees(id),
	FOREIGN KEY (menuItemQuickCode) REFERENCES QuickCodes(id) 
);